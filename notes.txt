Dec  Hex  Binary      HTML      Char    Description
---  ---  ------      ----      ----    -----------
0    00   00000000    &#0;      NUL     Null
1    01   00000001    &#1;      SOH     Start of Header
2    02   00000010    &#2;      STX     Start of Text
3    03   00000011    &#3;      ETX     End of Text
4    04   00000100    &#4;      EOT     End of Transmission
5    05   00000101    &#5;      ENQ     Enquiry
6    06   00000110    &#6;      ACK     Acknowledge
7    07   00000111    &#7;      BEL     Bell
8    08   00001000    &#8;      BS      Backspace
9    09   00001001    &#9;      HT      Horizontal Tab
10   0A   00001010    &#10;     LF      Line Feed
11   0B   00001011    &#11;     VT      Vertical Tab
12   0C   00001100    &#12;     FF      Form Feed
13   0D   00001101    &#13;     CR      Carriage Return
14   0E   00001110    &#14;     SO      Shift Out
15   0F   00001111    &#15;     SI      Shift In
16   10   00010000    &#16;     DLE     Data Link Escape
17   11   00010001    &#17;     DC1     Device Control 1
18   12   00010010    &#18;     DC2     Device Control 2
19   13   00010011    &#19;     DC3     Device Control 3
20   14   00010100    &#20;     DC4     Device Control 4
21   15   00010101    &#21;     NAK     Negative Acknowledge
22   16   00010110    &#22;     SYN     Synchronize
23   17   00010111    &#23;     ETB     End of Transmission Block
24   18   00011000    &#24;     CAN     Cancel
25   19   00011001    &#25;     EM      End of Medium
26   1A   00011010    &#26;     SUB     Substitute
27   1B   00011011    &#27;     ESC     Escape
28   1C   00011100    &#28;     FS      File Separator
29   1D   00011101    &#29;     GS      Group Separator
30   1E   00011110    &#30;     RS      Record Separator
31   1F   00011111    &#31;     US      Unit Separator


32   20   00100000    &#32;     space   Space
33   21   00100001    &#33;     !       Exclamation mark
34   22   00100010    &#34;     "       Double quote
35   23   00100011    &#35;     #       Number
36   24   00100100    &#36;     $       Dollar sign
37   25   00100101    &#37;     %       Percent
38   26   00100110    &#38;     &       Ampersand
39   27   00100111    &#39;     '       Single quote
40   28   00101000    &#40;     (       Left parenthesis
41   29   00101001    &#41;     )       Right parenthesis
42   2A   00101010    &#42;     *       Asterisk
43   2B   00101011    &#43;     +       Plus
44   2C   00101100    &#44;     ,       Comma
45   2D   00101101    &#45;     -       Minus
46   2E   00101110    &#46;     .       Period
47   2F   00101111    &#47;     /       Slash

48   30   00110000    &#48;     0       Zero
...
57   39   00111001    &#57;     9       Nine

58   3A   00111010    &#58;     :       Colon
59   3B   00111011    &#59;     ;       Semicolon
60   3C   00111100    &#60;     <       Less than
61   3D   00111101    &#61;     =       Equality sign
62   3E   00111110    &#62;     >       Greater than
63   3F   00111111    &#63;     ?       Question mark
64   40   01000000    &#64;     @       At sign

65   41   01000001    &#65;     A       UC A
...
90   5A   01011010    &#90;     Z       UC Z

91   5B   01011011    &#91;     [       Left square bracket
92   5C   01011100    &#92;     \       Backslash
93   5D   01011101    &#93;     ]       Right square bracket
94   5E   01011110    &#94;     ^       Caret / circumflex
95   5F   01011111    &#95;     _       Underscore
96   60   01100000    &#96;     `       Grave / accent

97   61   01100001    &#97;     a       LC a
...
122  7A   01111010    &#122;    z       LC z

123  7B   01111011    &#123;    {       Left curly bracket
124  7C   01111100    &#124;    |       Vertical bar
125  7D   01111101    &#125;    }       Right curly bracket
126  7E   01111110    &#126;    ~       Tilde


127  7F   01111111    &#127;    DEL     Delete


## String escape sequences from ???
Seq  Character       Encoding
\'   Single quote    0x0027
\"   Double quote    0x0022
\\   Backslash       0x005C
\0   Null            0x0000
\a   Alert           0x0007
\b   Backspace       0x0008
\e   Escape          0x001B
\f   Form feed       0x000C
\n   New line        0x000A
\r   Carriage return 0x000D
\t   Horizontal tab  0x0009
\v   Vertical tab    0x000B
\u   UTF-16          \uHHHH (range: 0000 - FFFF; example: \u00E7 = "Ã§")
\U   UTF-32          \U00HHHHHH (range: 000000 - 10FFFF; example: \U0001F47D = "ðŸ‘½")
\x   \u with variable length \xH[H][H][H]

## String escape sequences C#
Escape Sequence     Represents
\a  Bell (alert)
\b  Backspace
\f  Form feed
\n  New line
\r  Carriage return
\t  Horizontal tab
\v  Vertical tab
\'  Single quotation mark
\"  Double quotation mark
\\  Backslash
\?  Literal question mark
\ooo ASCII character in octal notation
\x hh ASCII character in hexadecimal notation
\x hhhh Unicode character in hexadecimal notation if this escape sequence is used in a wide-character constant or
        a Unicode string literal.  For example, WCHAR f = L'\x4e00' or WCHAR b[] = L"The Chinese character for one is \x4e00".


## String escape sequences C/C++
\?  3F  Question mark (used to avoid trigraphs)
\'  27  Apostrophe or single quotation mark
\"  22  Double quotation mark
\\  5C  Backslash
\a  07  Alert (Beep, Bell) (added in C89)[1]
\b  08  Backspace
\enote 1    1B  Escape character
\f  0C  Formfeed Page Break
\n  0A  Newline (Line Feed); see below
\nnnnote 2  nnn (octal)     The byte whose numerical value is given by nnn interpreted as an octal number
\r  0D  Carriage Return
\t  09  Horizontal Tab
\Uhhhhhhhhnote 4    non-ASCII   Unicode code point where h is a hexadecimal digit
\uhhhhnote 3    non-ASCII   Unicode code point below 10000 hexadecimal (added in C99)[1]:â€Š26â€Š
\v  0B  Vertical Tab
\xhhâ€¦   hhâ€¦     The byte whose numerical value is given by hhâ€¦ interpreted as a hexadecimal number 
